'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace SisVenWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://wikets.cl/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private Version_WebServiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IniciarSesionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarBodegasMovilesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarArticulosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarPreciosZPLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarStockZPLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarClientesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IngresarClienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AnularDocumentoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmitirDocumentoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnviarDocumentosDTEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObtenerDocumentoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarDocumentoDTEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EmitirTEDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarTEDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConsultarCorrelativoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Verificar_Estado_ClienteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SisVen.My.MySettings.Default.SisVen_SisVenWS_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event Version_WebServiceCompleted As Version_WebServiceCompletedEventHandler
        
        '''<remarks/>
        Public Event IniciarSesionCompleted As IniciarSesionCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarBodegasMovilesCompleted As ConsultarBodegasMovilesCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarArticulosCompleted As ConsultarArticulosCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarPreciosZPLCompleted As ConsultarPreciosZPLCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarStockZPLCompleted As ConsultarStockZPLCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarClientesCompleted As ConsultarClientesCompletedEventHandler
        
        '''<remarks/>
        Public Event IngresarClienteCompleted As IngresarClienteCompletedEventHandler
        
        '''<remarks/>
        Public Event AnularDocumentoCompleted As AnularDocumentoCompletedEventHandler
        
        '''<remarks/>
        Public Event EmitirDocumentoCompleted As EmitirDocumentoCompletedEventHandler
        
        '''<remarks/>
        Public Event EnviarDocumentosDTECompleted As EnviarDocumentosDTECompletedEventHandler
        
        '''<remarks/>
        Public Event ObtenerDocumentoCompleted As ObtenerDocumentoCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarDocumentoDTECompleted As ConsultarDocumentoDTECompletedEventHandler
        
        '''<remarks/>
        Public Event EmitirTEDCompleted As EmitirTEDCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarTEDCompleted As ConsultarTEDCompletedEventHandler
        
        '''<remarks/>
        Public Event ConsultarCorrelativoCompleted As ConsultarCorrelativoCompletedEventHandler
        
        '''<remarks/>
        Public Event Verificar_Estado_ClienteCompleted As Verificar_Estado_ClienteCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Version_WebService", RequestNamespace:="http://wikets.cl/", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Version_WebService() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Version_WebService", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Version_WebServiceAsync()
            Me.Version_WebServiceAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Version_WebServiceAsync(ByVal userState As Object)
            If (Me.Version_WebServiceOperationCompleted Is Nothing) Then
                Me.Version_WebServiceOperationCompleted = AddressOf Me.OnVersion_WebServiceOperationCompleted
            End If
            Me.InvokeAsync("Version_WebService", New Object(-1) {}, Me.Version_WebServiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnVersion_WebServiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.Version_WebServiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Version_WebServiceCompleted(Me, New Version_WebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Iniciar_Sesion", RequestElementName:="Iniciar_Sesion", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Iniciar_SesionResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IniciarSesion(ByVal wIdKey As String, ByVal wIdUsuario As String, ByVal wContrasena As String) As <System.Xml.Serialization.XmlElementAttribute("Iniciar_SesionResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("IniciarSesion", New Object() {wIdKey, wIdUsuario, wContrasena})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IniciarSesionAsync(ByVal wIdKey As String, ByVal wIdUsuario As String, ByVal wContrasena As String)
            Me.IniciarSesionAsync(wIdKey, wIdUsuario, wContrasena, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IniciarSesionAsync(ByVal wIdKey As String, ByVal wIdUsuario As String, ByVal wContrasena As String, ByVal userState As Object)
            If (Me.IniciarSesionOperationCompleted Is Nothing) Then
                Me.IniciarSesionOperationCompleted = AddressOf Me.OnIniciarSesionOperationCompleted
            End If
            Me.InvokeAsync("IniciarSesion", New Object() {wIdKey, wIdUsuario, wContrasena}, Me.IniciarSesionOperationCompleted, userState)
        End Sub
        
        Private Sub OnIniciarSesionOperationCompleted(ByVal arg As Object)
            If (Not (Me.IniciarSesionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IniciarSesionCompleted(Me, New IniciarSesionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Bodegas_Moviles", RequestElementName:="Consultar_Bodegas_Moviles", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_Bodegas_MovilesResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarBodegasMoviles(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_Bodegas_MovilesResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarBodegasMoviles", New Object() {wIdKey, wCliente, wLocal})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarBodegasMovilesAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double)
            Me.ConsultarBodegasMovilesAsync(wIdKey, wCliente, wLocal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarBodegasMovilesAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal userState As Object)
            If (Me.ConsultarBodegasMovilesOperationCompleted Is Nothing) Then
                Me.ConsultarBodegasMovilesOperationCompleted = AddressOf Me.OnConsultarBodegasMovilesOperationCompleted
            End If
            Me.InvokeAsync("ConsultarBodegasMoviles", New Object() {wIdKey, wCliente, wLocal}, Me.ConsultarBodegasMovilesOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarBodegasMovilesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarBodegasMovilesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarBodegasMovilesCompleted(Me, New ConsultarBodegasMovilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Articulos", RequestElementName:="Consultar_Articulos", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_ArticulosResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarArticulos(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal wBodega As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_ArticulosResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarArticulos", New Object() {wIdKey, wCliente, wLocal, wBodega})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarArticulosAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal wBodega As Double)
            Me.ConsultarArticulosAsync(wIdKey, wCliente, wLocal, wBodega, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarArticulosAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal wBodega As Double, ByVal userState As Object)
            If (Me.ConsultarArticulosOperationCompleted Is Nothing) Then
                Me.ConsultarArticulosOperationCompleted = AddressOf Me.OnConsultarArticulosOperationCompleted
            End If
            Me.InvokeAsync("ConsultarArticulos", New Object() {wIdKey, wCliente, wLocal, wBodega}, Me.ConsultarArticulosOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarArticulosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarArticulosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarArticulosCompleted(Me, New ConsultarArticulosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Precios_ZPL", RequestElementName:="Consultar_Precios_ZPL", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_Precios_ZPLResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarPreciosZPL(ByVal wIdKey As String, ByVal wCliente As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_Precios_ZPLResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarPreciosZPL", New Object() {wIdKey, wCliente})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarPreciosZPLAsync(ByVal wIdKey As String, ByVal wCliente As Double)
            Me.ConsultarPreciosZPLAsync(wIdKey, wCliente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarPreciosZPLAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal userState As Object)
            If (Me.ConsultarPreciosZPLOperationCompleted Is Nothing) Then
                Me.ConsultarPreciosZPLOperationCompleted = AddressOf Me.OnConsultarPreciosZPLOperationCompleted
            End If
            Me.InvokeAsync("ConsultarPreciosZPL", New Object() {wIdKey, wCliente}, Me.ConsultarPreciosZPLOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarPreciosZPLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarPreciosZPLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarPreciosZPLCompleted(Me, New ConsultarPreciosZPLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Stock_ZPL", RequestElementName:="Consultar_Stock_ZPL", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_Stock_ZPLResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarStockZPL(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal wBodega As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_Stock_ZPLResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarStockZPL", New Object() {wIdKey, wCliente, wLocal, wBodega})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarStockZPLAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal wBodega As Double)
            Me.ConsultarStockZPLAsync(wIdKey, wCliente, wLocal, wBodega, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarStockZPLAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Double, ByVal wBodega As Double, ByVal userState As Object)
            If (Me.ConsultarStockZPLOperationCompleted Is Nothing) Then
                Me.ConsultarStockZPLOperationCompleted = AddressOf Me.OnConsultarStockZPLOperationCompleted
            End If
            Me.InvokeAsync("ConsultarStockZPL", New Object() {wIdKey, wCliente, wLocal, wBodega}, Me.ConsultarStockZPLOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarStockZPLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarStockZPLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarStockZPLCompleted(Me, New ConsultarStockZPLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Clientes", RequestElementName:="Consultar_Clientes", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_ClientesResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarClientes(ByVal wIdKey As String, ByVal wCliente As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_ClientesResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarClientes", New Object() {wIdKey, wCliente})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarClientesAsync(ByVal wIdKey As String, ByVal wCliente As Double)
            Me.ConsultarClientesAsync(wIdKey, wCliente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarClientesAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal userState As Object)
            If (Me.ConsultarClientesOperationCompleted Is Nothing) Then
                Me.ConsultarClientesOperationCompleted = AddressOf Me.OnConsultarClientesOperationCompleted
            End If
            Me.InvokeAsync("ConsultarClientes", New Object() {wIdKey, wCliente}, Me.ConsultarClientesOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarClientesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarClientesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarClientesCompleted(Me, New ConsultarClientesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Ingresar_Cliente", RequestElementName:="Ingresar_Cliente", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Ingresar_ClienteResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IngresarCliente(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wRut As String, ByVal wRazonSocial As String, ByVal wFantasia As String, ByVal wDireccion As String, ByVal wCiudad As String, ByVal wComuna As String, ByVal wGiro As String, ByVal wEmail As String) As <System.Xml.Serialization.XmlElementAttribute("Ingresar_ClienteResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("IngresarCliente", New Object() {wIdKey, wCliente, wRut, wRazonSocial, wFantasia, wDireccion, wCiudad, wComuna, wGiro, wEmail})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IngresarClienteAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wRut As String, ByVal wRazonSocial As String, ByVal wFantasia As String, ByVal wDireccion As String, ByVal wCiudad As String, ByVal wComuna As String, ByVal wGiro As String, ByVal wEmail As String)
            Me.IngresarClienteAsync(wIdKey, wCliente, wRut, wRazonSocial, wFantasia, wDireccion, wCiudad, wComuna, wGiro, wEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IngresarClienteAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wRut As String, ByVal wRazonSocial As String, ByVal wFantasia As String, ByVal wDireccion As String, ByVal wCiudad As String, ByVal wComuna As String, ByVal wGiro As String, ByVal wEmail As String, ByVal userState As Object)
            If (Me.IngresarClienteOperationCompleted Is Nothing) Then
                Me.IngresarClienteOperationCompleted = AddressOf Me.OnIngresarClienteOperationCompleted
            End If
            Me.InvokeAsync("IngresarCliente", New Object() {wIdKey, wCliente, wRut, wRazonSocial, wFantasia, wDireccion, wCiudad, wComuna, wGiro, wEmail}, Me.IngresarClienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnIngresarClienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.IngresarClienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IngresarClienteCompleted(Me, New IngresarClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Anular_Documento", RequestElementName:="Anular_Documento", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Anular_DocumentoResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AnularDocumento(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal wFechaAnulacion As Date, ByVal wMotivo As String) As <System.Xml.Serialization.XmlElementAttribute("Anular_DocumentoResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("AnularDocumento", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero, wFechaAnulacion, wMotivo})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AnularDocumentoAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal wFechaAnulacion As Date, ByVal wMotivo As String)
            Me.AnularDocumentoAsync(wIdKey, wCliente, wLocal, wTipoDoc, wNumero, wFechaAnulacion, wMotivo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AnularDocumentoAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal wFechaAnulacion As Date, ByVal wMotivo As String, ByVal userState As Object)
            If (Me.AnularDocumentoOperationCompleted Is Nothing) Then
                Me.AnularDocumentoOperationCompleted = AddressOf Me.OnAnularDocumentoOperationCompleted
            End If
            Me.InvokeAsync("AnularDocumento", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero, wFechaAnulacion, wMotivo}, Me.AnularDocumentoOperationCompleted, userState)
        End Sub
        
        Private Sub OnAnularDocumentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.AnularDocumentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AnularDocumentoCompleted(Me, New AnularDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Emitir_Documento", RequestElementName:="Emitir_Documento", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Emitir_DocumentoResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmitirDocumento( _
                    ByVal wIdKey As String,  _
                    ByVal wClienteEmisor As String,  _
                    ByVal wPOS As Double,  _
                    ByVal wCaja As Double,  _
                    ByVal wUsuario As String,  _
                    ByVal wVendedor As String,  _
                    ByVal wLocal As Double,  _
                    ByVal wTipoDoc As String,  _
                    ByVal wNumero As Double,  _
                    ByVal wFecha As Date,  _
                    ByVal wElectronico As Boolean,  _
                    ByVal wTipoDocRef As String,  _
                    ByVal wNumDocRef As Double,  _
                    ByVal wFechaDocRef As Date,  _
                    ByVal wClienteRef As Double,  _
                    ByVal wBodega As String,  _
                    ByVal wFormaPago As String,  _
                    ByVal wObservacion As String,  _
                    ByVal wMotivo As String,  _
                    ByVal wSubTotal As Double,  _
                    ByVal wNeto As Double,  _
                    ByVal wDescuento As Double,  _
                    ByVal wIVA As Double,  _
                    ByVal wTotal As Double,  _
                    ByVal xMIN As Double,  _
                    ByVal xBEB As Double,  _
                    ByVal xVIN As Double,  _
                    ByVal xCER As Double,  _
                    ByVal xLIC As Double,  _
                    ByVal xCAR As Double,  _
                    ByVal xHAR As Double,  _
                    ByVal xTAB As Double,  _
                    ByVal xFEP As Double,  _
                    ByVal xOTRO As Double,  _
                    ByVal wDetalle As String) As <System.Xml.Serialization.XmlElementAttribute("Emitir_DocumentoResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("EmitirDocumento", New Object() {wIdKey, wClienteEmisor, wPOS, wCaja, wUsuario, wVendedor, wLocal, wTipoDoc, wNumero, wFecha, wElectronico, wTipoDocRef, wNumDocRef, wFechaDocRef, wClienteRef, wBodega, wFormaPago, wObservacion, wMotivo, wSubTotal, wNeto, wDescuento, wIVA, wTotal, xMIN, xBEB, xVIN, xCER, xLIC, xCAR, xHAR, xTAB, xFEP, xOTRO, wDetalle})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmitirDocumentoAsync( _
                    ByVal wIdKey As String,  _
                    ByVal wClienteEmisor As String,  _
                    ByVal wPOS As Double,  _
                    ByVal wCaja As Double,  _
                    ByVal wUsuario As String,  _
                    ByVal wVendedor As String,  _
                    ByVal wLocal As Double,  _
                    ByVal wTipoDoc As String,  _
                    ByVal wNumero As Double,  _
                    ByVal wFecha As Date,  _
                    ByVal wElectronico As Boolean,  _
                    ByVal wTipoDocRef As String,  _
                    ByVal wNumDocRef As Double,  _
                    ByVal wFechaDocRef As Date,  _
                    ByVal wClienteRef As Double,  _
                    ByVal wBodega As String,  _
                    ByVal wFormaPago As String,  _
                    ByVal wObservacion As String,  _
                    ByVal wMotivo As String,  _
                    ByVal wSubTotal As Double,  _
                    ByVal wNeto As Double,  _
                    ByVal wDescuento As Double,  _
                    ByVal wIVA As Double,  _
                    ByVal wTotal As Double,  _
                    ByVal xMIN As Double,  _
                    ByVal xBEB As Double,  _
                    ByVal xVIN As Double,  _
                    ByVal xCER As Double,  _
                    ByVal xLIC As Double,  _
                    ByVal xCAR As Double,  _
                    ByVal xHAR As Double,  _
                    ByVal xTAB As Double,  _
                    ByVal xFEP As Double,  _
                    ByVal xOTRO As Double,  _
                    ByVal wDetalle As String)
            Me.EmitirDocumentoAsync(wIdKey, wClienteEmisor, wPOS, wCaja, wUsuario, wVendedor, wLocal, wTipoDoc, wNumero, wFecha, wElectronico, wTipoDocRef, wNumDocRef, wFechaDocRef, wClienteRef, wBodega, wFormaPago, wObservacion, wMotivo, wSubTotal, wNeto, wDescuento, wIVA, wTotal, xMIN, xBEB, xVIN, xCER, xLIC, xCAR, xHAR, xTAB, xFEP, xOTRO, wDetalle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmitirDocumentoAsync( _
                    ByVal wIdKey As String,  _
                    ByVal wClienteEmisor As String,  _
                    ByVal wPOS As Double,  _
                    ByVal wCaja As Double,  _
                    ByVal wUsuario As String,  _
                    ByVal wVendedor As String,  _
                    ByVal wLocal As Double,  _
                    ByVal wTipoDoc As String,  _
                    ByVal wNumero As Double,  _
                    ByVal wFecha As Date,  _
                    ByVal wElectronico As Boolean,  _
                    ByVal wTipoDocRef As String,  _
                    ByVal wNumDocRef As Double,  _
                    ByVal wFechaDocRef As Date,  _
                    ByVal wClienteRef As Double,  _
                    ByVal wBodega As String,  _
                    ByVal wFormaPago As String,  _
                    ByVal wObservacion As String,  _
                    ByVal wMotivo As String,  _
                    ByVal wSubTotal As Double,  _
                    ByVal wNeto As Double,  _
                    ByVal wDescuento As Double,  _
                    ByVal wIVA As Double,  _
                    ByVal wTotal As Double,  _
                    ByVal xMIN As Double,  _
                    ByVal xBEB As Double,  _
                    ByVal xVIN As Double,  _
                    ByVal xCER As Double,  _
                    ByVal xLIC As Double,  _
                    ByVal xCAR As Double,  _
                    ByVal xHAR As Double,  _
                    ByVal xTAB As Double,  _
                    ByVal xFEP As Double,  _
                    ByVal xOTRO As Double,  _
                    ByVal wDetalle As String,  _
                    ByVal userState As Object)
            If (Me.EmitirDocumentoOperationCompleted Is Nothing) Then
                Me.EmitirDocumentoOperationCompleted = AddressOf Me.OnEmitirDocumentoOperationCompleted
            End If
            Me.InvokeAsync("EmitirDocumento", New Object() {wIdKey, wClienteEmisor, wPOS, wCaja, wUsuario, wVendedor, wLocal, wTipoDoc, wNumero, wFecha, wElectronico, wTipoDocRef, wNumDocRef, wFechaDocRef, wClienteRef, wBodega, wFormaPago, wObservacion, wMotivo, wSubTotal, wNeto, wDescuento, wIVA, wTotal, xMIN, xBEB, xVIN, xCER, xLIC, xCAR, xHAR, xTAB, xFEP, xOTRO, wDetalle}, Me.EmitirDocumentoOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmitirDocumentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmitirDocumentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmitirDocumentoCompleted(Me, New EmitirDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Enviar_Documentos_DTE", RequestElementName:="Enviar_Documentos_DTE", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Enviar_Documentos_DTEResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnviarDocumentosDTE(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double) As <System.Xml.Serialization.XmlElementAttribute("Enviar_Documentos_DTEResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("EnviarDocumentosDTE", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnviarDocumentosDTEAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double)
            Me.EnviarDocumentosDTEAsync(wIdKey, wCliente, wLocal, wTipoDoc, wNumero, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnviarDocumentosDTEAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal userState As Object)
            If (Me.EnviarDocumentosDTEOperationCompleted Is Nothing) Then
                Me.EnviarDocumentosDTEOperationCompleted = AddressOf Me.OnEnviarDocumentosDTEOperationCompleted
            End If
            Me.InvokeAsync("EnviarDocumentosDTE", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero}, Me.EnviarDocumentosDTEOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnviarDocumentosDTEOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnviarDocumentosDTECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnviarDocumentosDTECompleted(Me, New EnviarDocumentosDTECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Obtener_Documento", RequestElementName:="Obtener_Documento", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Obtener_DocumentoResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObtenerDocumento(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double) As <System.Xml.Serialization.XmlElementAttribute("Obtener_DocumentoResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ObtenerDocumento", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObtenerDocumentoAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double)
            Me.ObtenerDocumentoAsync(wIdKey, wCliente, wLocal, wTipoDoc, wNumero, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObtenerDocumentoAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal userState As Object)
            If (Me.ObtenerDocumentoOperationCompleted Is Nothing) Then
                Me.ObtenerDocumentoOperationCompleted = AddressOf Me.OnObtenerDocumentoOperationCompleted
            End If
            Me.InvokeAsync("ObtenerDocumento", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero}, Me.ObtenerDocumentoOperationCompleted, userState)
        End Sub
        
        Private Sub OnObtenerDocumentoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObtenerDocumentoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObtenerDocumentoCompleted(Me, New ObtenerDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Documento_DTE", RequestElementName:="Consultar_Documento_DTE", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_Documento_DTEResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarDocumentoDTE(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_Documento_DTEResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarDocumentoDTE", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarDocumentoDTEAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double)
            Me.ConsultarDocumentoDTEAsync(wIdKey, wCliente, wLocal, wTipoDoc, wNumero, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarDocumentoDTEAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal userState As Object)
            If (Me.ConsultarDocumentoDTEOperationCompleted Is Nothing) Then
                Me.ConsultarDocumentoDTEOperationCompleted = AddressOf Me.OnConsultarDocumentoDTEOperationCompleted
            End If
            Me.InvokeAsync("ConsultarDocumentoDTE", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero}, Me.ConsultarDocumentoDTEOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarDocumentoDTEOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarDocumentoDTECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarDocumentoDTECompleted(Me, New ConsultarDocumentoDTECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Emitir_TED", RequestElementName:="Emitir_TED", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Emitir_TEDResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EmitirTED(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double) As <System.Xml.Serialization.XmlElementAttribute("Emitir_TEDResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("EmitirTED", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EmitirTEDAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double)
            Me.EmitirTEDAsync(wIdKey, wCliente, wLocal, wTipoDoc, wNumero, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EmitirTEDAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal userState As Object)
            If (Me.EmitirTEDOperationCompleted Is Nothing) Then
                Me.EmitirTEDOperationCompleted = AddressOf Me.OnEmitirTEDOperationCompleted
            End If
            Me.InvokeAsync("EmitirTED", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero}, Me.EmitirTEDOperationCompleted, userState)
        End Sub
        
        Private Sub OnEmitirTEDOperationCompleted(ByVal arg As Object)
            If (Not (Me.EmitirTEDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EmitirTEDCompleted(Me, New EmitirTEDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_TED", RequestElementName:="Consultar_TED", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_TEDResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarTED(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double) As <System.Xml.Serialization.XmlElementAttribute("Consultar_TEDResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarTED", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarTEDAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double)
            Me.ConsultarTEDAsync(wIdKey, wCliente, wLocal, wTipoDoc, wNumero, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarTEDAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wNumero As Double, ByVal userState As Object)
            If (Me.ConsultarTEDOperationCompleted Is Nothing) Then
                Me.ConsultarTEDOperationCompleted = AddressOf Me.OnConsultarTEDOperationCompleted
            End If
            Me.InvokeAsync("ConsultarTED", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wNumero}, Me.ConsultarTEDOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarTEDOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarTEDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarTEDCompleted(Me, New ConsultarTEDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Consultar_Correlativo", RequestElementName:="Consultar_Correlativo", RequestNamespace:="http://wikets.cl/", ResponseElementName:="Consultar_CorrelativoResponse", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsultarCorrelativo(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wFecha As Date, ByVal wCaja As Integer) As <System.Xml.Serialization.XmlElementAttribute("Consultar_CorrelativoResult")> System.Data.DataTable
            Dim results() As Object = Me.Invoke("ConsultarCorrelativo", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wFecha, wCaja})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConsultarCorrelativoAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wFecha As Date, ByVal wCaja As Integer)
            Me.ConsultarCorrelativoAsync(wIdKey, wCliente, wLocal, wTipoDoc, wFecha, wCaja, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConsultarCorrelativoAsync(ByVal wIdKey As String, ByVal wCliente As Double, ByVal wLocal As Integer, ByVal wTipoDoc As String, ByVal wFecha As Date, ByVal wCaja As Integer, ByVal userState As Object)
            If (Me.ConsultarCorrelativoOperationCompleted Is Nothing) Then
                Me.ConsultarCorrelativoOperationCompleted = AddressOf Me.OnConsultarCorrelativoOperationCompleted
            End If
            Me.InvokeAsync("ConsultarCorrelativo", New Object() {wIdKey, wCliente, wLocal, wTipoDoc, wFecha, wCaja}, Me.ConsultarCorrelativoOperationCompleted, userState)
        End Sub
        
        Private Sub OnConsultarCorrelativoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConsultarCorrelativoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConsultarCorrelativoCompleted(Me, New ConsultarCorrelativoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://wikets.cl/Verificar_Estado_Cliente", RequestNamespace:="http://wikets.cl/", ResponseNamespace:="http://wikets.cl/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Verificar_Estado_Cliente(ByVal wIDKey As String, ByVal wCliente As Decimal) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Verificar_Estado_Cliente", New Object() {wIDKey, wCliente})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Verificar_Estado_ClienteAsync(ByVal wIDKey As String, ByVal wCliente As Decimal)
            Me.Verificar_Estado_ClienteAsync(wIDKey, wCliente, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Verificar_Estado_ClienteAsync(ByVal wIDKey As String, ByVal wCliente As Decimal, ByVal userState As Object)
            If (Me.Verificar_Estado_ClienteOperationCompleted Is Nothing) Then
                Me.Verificar_Estado_ClienteOperationCompleted = AddressOf Me.OnVerificar_Estado_ClienteOperationCompleted
            End If
            Me.InvokeAsync("Verificar_Estado_Cliente", New Object() {wIDKey, wCliente}, Me.Verificar_Estado_ClienteOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerificar_Estado_ClienteOperationCompleted(ByVal arg As Object)
            If (Not (Me.Verificar_Estado_ClienteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Verificar_Estado_ClienteCompleted(Me, New Verificar_Estado_ClienteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub Version_WebServiceCompletedEventHandler(ByVal sender As Object, ByVal e As Version_WebServiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Version_WebServiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub IniciarSesionCompletedEventHandler(ByVal sender As Object, ByVal e As IniciarSesionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IniciarSesionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarBodegasMovilesCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarBodegasMovilesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarBodegasMovilesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarArticulosCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarArticulosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarArticulosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarPreciosZPLCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarPreciosZPLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarPreciosZPLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarStockZPLCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarStockZPLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarStockZPLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarClientesCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarClientesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarClientesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub IngresarClienteCompletedEventHandler(ByVal sender As Object, ByVal e As IngresarClienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IngresarClienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub AnularDocumentoCompletedEventHandler(ByVal sender As Object, ByVal e As AnularDocumentoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AnularDocumentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub EmitirDocumentoCompletedEventHandler(ByVal sender As Object, ByVal e As EmitirDocumentoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmitirDocumentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub EnviarDocumentosDTECompletedEventHandler(ByVal sender As Object, ByVal e As EnviarDocumentosDTECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnviarDocumentosDTECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ObtenerDocumentoCompletedEventHandler(ByVal sender As Object, ByVal e As ObtenerDocumentoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObtenerDocumentoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarDocumentoDTECompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarDocumentoDTECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarDocumentoDTECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub EmitirTEDCompletedEventHandler(ByVal sender As Object, ByVal e As EmitirTEDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EmitirTEDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarTEDCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarTEDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarTEDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub ConsultarCorrelativoCompletedEventHandler(ByVal sender As Object, ByVal e As ConsultarCorrelativoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConsultarCorrelativoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0")>  _
    Public Delegate Sub Verificar_Estado_ClienteCompletedEventHandler(ByVal sender As Object, ByVal e As Verificar_Estado_ClienteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1099.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Verificar_Estado_ClienteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
End Namespace
